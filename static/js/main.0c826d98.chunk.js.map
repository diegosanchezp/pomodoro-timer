{"version":3,"sources":["Timer.js","App.js","serviceWorker.js","index.js"],"names":["initialState","hours","minutes","seconds","date","Date","setHours","Timer","props","timers","state","index","timerState","changed","this","setState","newTime","setSeconds","getSeconds","addSeconds","timerID","setInterval","clearInterval","srTime","toTimeString","split","slice","console","log","nextIndex","length","nextTimer","prevProps","prevState","getMinutes","fowardTimer","JSON","stringify","id","getTimeString","data-timer-state","name","title","onClick","startPause","bind","className","resetTimer","autoPlay","src","React","Component","defaultProps","onPause","onReset","onStart","onStop","App","type","time","newTimers","parse","incDecTimer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c826d98.chunk.js","sourcesContent":["import React from 'react';\nimport './Timer.css';\n\n// Machine states\nconst RUNNING = 'running';\nconst RESETED = 'reseted';\nconst PAUSED = 'paused';\n\nfunction initialState(hours = 0, minutes = 25, seconds = 0){\n  // Craft a date\n  const date = new Date();\n  date.setHours(hours, minutes, seconds, 0);\n  return date;\n}\n\nclass Timer extends React.Component{\n\n  static defaultProps = {\n    timers: [{\n      hours: 0,\n      minutes: 25,\n      seconds: 0,\n    }],\n    onPause: () => {},\n    onReset: () => {},\n    onStart: () => {},\n    onStop: () => {},\n  }\n\n  constructor(props) {\n    super(props);\n    const {hours, minutes, seconds} = props.timers[0]\n    // Set the date to 0 hours and 25 minutes\n    this.state = {\n      date: initialState(hours, minutes, seconds),\n      index: 0,     \n      timerState: RESETED,\n      changed: false,\n    };\n  }\n\n  addSeconds(seconds){\n    this.setState(({date, timerState})=>{\n      const newTime = new Date(date);\n      newTime.setSeconds(newTime.getSeconds()+seconds);\n      return {\n        date: newTime,\n        timerState: RUNNING,\n        changed: false\n      }\n    });\n  }\n\n  addMinute(minutes){\n    this.addSeconds(60*minutes);\n  }\n\n  startTimer(){\n    this.timerID = setInterval(\n      () => this.addSeconds(-1),\n      1000\n    );\n  }\n\n  pauseTimer(){\n    clearInterval(this.timerID);  \n    this.setState({\n      timerState: PAUSED\n    });\n    // this.props.onPause();\n  }\n  startPause(){\n    const {timerState} = this.state;\n    if(timerState === RESETED || timerState === PAUSED){\n      // Start the timer\n      this.timerID = setInterval(\n        () => this.addSeconds(-1),\n        1000\n      );\n    }else if(timerState === RUNNING){\n      // Pause the timer\n      clearInterval(this.timerID);  \n      this.setState({\n        timerState: PAUSED\n      });\n    }\n  }\n\n  resetTimer(){\n    const {index} = this.state;\n    const {hours, minutes, seconds} = this.props.timers[index]; \n    clearInterval(this.timerID);  \n    this.setState({\n      date: initialState(hours,minutes,seconds),\n      timerState: RESETED\n    });\n  }\n\n  getTimeString(){\n    let srTime = this.state.date.toTimeString();\n    // Get hh:mm:ss\n    srTime = srTime.split(' ')[0];\n    // Get mm:ss\n    return srTime.slice(3,); \n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);  \n  }\n\n  componentDidMount(){\n    // document.addEventListener()\n    console.log(this.state.timerState);\n  }\n\n  nextTimer(nextIndex){\n    const {hours, minutes, seconds} = this.props.timers[nextIndex]; \n    this.setState({\n      date: initialState(hours,minutes,seconds),\n      index: nextIndex,\n      // timerState: RUNNING,\n      changed: true\n    });\n  }\n\n  fowardTimer(){\n    const {index} = this.state;\n    const {timers} = this.props;\n\n    //Advance to next timer \n    if(index === timers.length - 1){\n      // If we reached the last timer loop back to the first\n      this.nextTimer(0);\n    }else{\n      this.nextTimer(index + 1);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    const {date, index} = this.state;\n    if(date.getSeconds() === 0 && date.getMinutes() === 0){\n      // Timer has stopped, we then need to advance to next timer\n      this.fowardTimer();\n    }\n    // If timers have been changed by parent then rerender\n    if(JSON.stringify(this.props.timers) !== JSON.stringify(prevProps.timers)){\n\n      const {hours, minutes, seconds} = this.props.timers[index]; \n      this.setState({\n        date: initialState(hours,minutes,seconds),\n      })\n    }\n  }\n\n  render(){\n    return (\n      <div id=\"timer-box\" >\n        <p id=\"time-left\">{this.getTimeString()}</p>\n        <p id=\"timer-label\" data-timer-state={this.state.timerState}>Session: {this.state.timerState}</p>\n        <p>{this.props.timers[this.state.index].name} time!</p>\n        <div id=\"actions\">\n          <button id=\"start_stop\" \n          title={\"Play or Stop timer\"} \n          onClick={this.startPause.bind(this)}>\n            { \n              (() =>{\n                if(this.state.timerState === PAUSED || this.state.timerState === RESETED){\n                  return <i className=\"fa fa-play\"></i>\n                }else if (this.state.timerState === RUNNING){\n                  return  <i className=\"fa fa-pause\"></i>  \n                }\n              })()\n            }\n          </button>\n          <button id=\"reset\" onClick={this.resetTimer.bind(this)}>Reset timer</button>\n          <button title=\"Foward timer\" onClick={this.fowardTimer.bind(this)}>\n            <i className=\"fa fa-forward\"></i>\n          </button>\n          {this.state.changed && \n            <audio \n              autoPlay\n              src=\"http://soundbible.com/mp3/Door Bell-SoundBible.com-1986366504.mp3\">\n            </audio> }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;","import React from 'react';\nimport Timer from './Timer';\n\nimport './App.css';\n\nconst SESSION = 0; \nconst BREAK = 1;\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      timers: [\n        {hours: 0, minutes: 25, seconds: 0, name: \"Work\"}, //Session\n        {hours: 0, minutes: 5, seconds: 0, name: \"Break\"} // BREAK \n      ]\n    }\n  }\n\n  incDecTimer(type, time){\n    this.setState(({timers})=>{\n      // Using JSON object to make a new deep copy of the props\n      const newTimers = JSON.parse(JSON.stringify(timers));\n      newTimers[type].minutes = newTimers[type].minutes + time; \n      if(newTimers[type].minutes >= 0){\n        return { timers: newTimers }\n      }else{\n        return \n      }\n    });\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Timer timers={this.state.timers}/>\n        <p id=\"session-label\">\n          Work length:\n          <span id=\"session-length\"> \n          {' '}{this.state.timers[SESSION].minutes} \n          {this.state.timers[SESSION].minutes === 1 ? \" minute\": \" minutes\"} \n          </span>\n        </p>\n        <div className=\"control\">\n          <button id=\"session-increment\" title=\"Session increment\" \n            onClick={this.incDecTimer.bind(this, SESSION, 1)}>\n              <i className=\"fa fa-plus\"></i>\n            </button>\n          <button id=\"session-decrement\" title=\"Session decrement\" \n            onClick={this.incDecTimer.bind(this, SESSION, -1)}>\n              <i className=\"fa fa-minus\"></i>\n            </button>\n        </div>\n        <p id=\"break-label\">\n          Break length:  \n          <span id=\"break-length\"> \n            {' '}{this.state.timers[BREAK].minutes} \n            {this.state.timers[BREAK].minutes === 1 ? \" minute\": \" minutes\"} \n            </span>\n        </p>\n        <div className=\"control\">\n          <button id=\"break-increment\" title=\"Break increment\" \n            onClick={this.incDecTimer.bind(this, BREAK, 1)}>\n            <i className=\"fa fa-plus\"></i>\n          </button>\n          <button id=\"break-decrement\" title=\"Break decrement\" \n            onClick={this.incDecTimer.bind(this, BREAK, -1)}>\n            <i className=\"fa fa-minus\"></i>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}